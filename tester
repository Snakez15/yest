-- Player Controls GUI
local Methods = {
    Fly = "Bypass",
    Infstamina = "Getgc"
}

local plrs = game:GetService("Players")
local me = plrs.LocalPlayer
local run = game:GetService("RunService")
local input = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local rp = game:GetService("ReplicatedStorage")

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "PlayerControlsGUI"

local MainFrame = Instance.new("Frame")
MainFrame.Parent = ScreenGui
MainFrame.Size = UDim2.new(0, 320, 0, 480)
MainFrame.Position = UDim2.new(0.5, -160, 0.5, -240)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0

local UIList = Instance.new("UIListLayout")
UIList.Parent = MainFrame
UIList.Padding = UDim.new(0, 10)
UIList.FillDirection = Enum.FillDirection.Vertical
UIList.SortOrder = Enum.SortOrder.LayoutOrder

local function addSlider(label, min, max, default, callback)
    local frame = Instance.new("Frame")
    frame.Parent = MainFrame
    frame.Size = UDim2.new(1, -20, 0, 40)
    frame.BackgroundTransparency = 1

    local text = Instance.new("TextLabel")
    text.Parent = frame
    text.Size = UDim2.new(0.5, -8, 1, 0)
    text.Position = UDim2.new(0, 8, 0, 0)
    text.BackgroundTransparency = 1
    text.Text = label
    text.TextColor3 = Color3.new(1, 1, 1)
    text.TextXAlignment = Enum.TextXAlignment.Left

    local slider = Instance.new("TextBox")
    slider.Parent = frame
    slider.Size = UDim2.new(0.5, -8, 1, 0)
    slider.Position = UDim2.new(0.5, 8, 0, 0)
    slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    slider.Text = tostring(default)
    slider.TextColor3 = Color3.new(1, 1, 1)
    slider.ClearTextOnFocus = false

    slider.FocusLost:Connect(function()
        local val = tonumber(slider.Text)
        if val then
            val = math.clamp(val, min, max)
            slider.Text = tostring(val)
            local flyConn
            local flyMethod = Methods.Fly or "Bypass"
            local function startFly(char)
                if flyConn then flyConn:Disconnect() end
                local hrp = char:FindFirstChild("HumanoidRootPart")
                local hum = char:FindFirstChild("Humanoid")
                if not hrp or not hum then return end
                hum.PlatformStand = true
                flyConn = run.RenderStepped:Connect(function()
                    if not hrp or not hrp.Parent or not hum or not hum.Parent then return end
                    local flyspeed = (flyMethod == "Bypass") and 1.5 or 1.0
                    local move = Vector3.new(0, 0, 0)
                    local moved = false
                    if input:IsKeyDown(Enum.KeyCode.W) then move = move + (camera.CFrame.LookVector * flyspeed); moved = true end
                    if input:IsKeyDown(Enum.KeyCode.S) then move = move - (camera.CFrame.LookVector * flyspeed); moved = true end
                    if input:IsKeyDown(Enum.KeyCode.A) then move = move - (camera.CFrame.RightVector * flyspeed); moved = true end
                    if input:IsKeyDown(Enum.KeyCode.D) then move = move + (camera.CFrame.RightVector * flyspeed); moved = true end
                    if moved then
                        hrp.CFrame = hrp.CFrame + move
                    end
                end)
            end
            local function enableFly()
                if me.Character then
                    startFly(me.Character)
                end
                me.CharacterAdded:Connect(function(char)
                    repeat wait() until char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid")
                    startFly(char)
                end)
            end
            local function disableFly()
                if flyConn then flyConn:Disconnect() end
                flyConn = nil
                if me.Character and me.Character:FindFirstChild("Humanoid") then
                    me.Character.Humanoid.PlatformStand = false
                end
            end
            addToggle("Fly", false, function(enabled)
                if enabled then enableFly() else disableFly() end
            end)

-- FOV Slider
addSlider("FOV", 70, 120, camera.FieldOfView, function(val)
    camera.FieldOfView = val
end)

-- Camera Distance Slider
addSlider("Camera Distance", 10, 500, me.CameraMaxZoomDistance, function(val)
    me.CameraMaxZoomDistance = val
end)

-- Jump Slider
addSlider("Jump Height", 7.1, 25, 7.1, function(val)
    if me.Character and me.Character:FindFirstChild("Humanoid") then
        me.Character.Humanoid.UseJumpPower = false
        me.Character.Humanoid.JumpHeight = val
    end
end)

-- Gravity Slider
addSlider("Gravity", workspace.Gravity, 75, workspace.Gravity, function(val)
    workspace.Gravity = val
end)

-- Fly Toggle with Method Selector
local flyConn, flyBodyVel
local flyMethod = "Bypass"
local function enableFly()
    local function startFly(char)
        if flyBodyVel then flyBodyVel:Destroy() end
        if flyConn then flyConn:Disconnect() end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        flyBodyVel = Instance.new("BodyVelocity")
        flyBodyVel.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        flyBodyVel.Velocity = Vector3.new(0, 0, 0)
        flyBodyVel.Parent = hrp
        flyConn = run.RenderStepped:Connect(function()
            if not hrp or not hrp.Parent then return end
            local vel = Vector3.new(0, 0, 0)
            local flyspeed = (flyMethod == "Bypass") and 60 or 40
            if input:IsKeyDown(Enum.KeyCode.W) then vel = vel + (camera.CFrame.LookVector * flyspeed) end
            if input:IsKeyDown(Enum.KeyCode.S) then vel = vel - (camera.CFrame.LookVector * flyspeed) end
            if input:IsKeyDown(Enum.KeyCode.A) then vel = vel - (camera.CFrame.RightVector * flyspeed) end
            if input:IsKeyDown(Enum.KeyCode.D) then vel = vel + (camera.CFrame.RightVector * flyspeed) end
            flyBodyVel.Velocity = vel
            if flyMethod == "Bypass" then
                local event = rp:FindFirstChild("Events") and rp.Events:FindFirstChild("__RZDONL")
                if event then pcall(function()
                    event:FireServer("__---r", Vector3.new(0, 0, 0), hrp.CFrame, false)
                end) end
            end
        end)
    end
    if me.Character then
        startFly(me.Character)
    end
    me.CharacterAdded:Connect(function(char)
        repeat wait() until char:FindFirstChild("HumanoidRootPart")
        startFly(char)
    end)
end
local function disableFly()
    if flyBodyVel then flyBodyVel:Destroy() end
    flyBodyVel = nil
    if flyConn then flyConn:Disconnect() end
    flyConn = nil
end
addToggle("Fly", false, function(enabled)
    if enabled then enableFly() else disableFly() end
end)

-- Fly Method Dropdown
local flyMethodFrame = Instance.new("Frame")
flyMethodFrame.Parent = MainFrame
flyMethodFrame.Size = UDim2.new(1, -20, 0, 32)
flyMethodFrame.BackgroundTransparency = 1
local flyMethodLabel = Instance.new("TextLabel")
flyMethodLabel.Parent = flyMethodFrame
flyMethodLabel.Size = UDim2.new(0.5, -8, 1, 0)
flyMethodLabel.Position = UDim2.new(0, 8, 0, 0)
flyMethodLabel.BackgroundTransparency = 1
flyMethodLabel.Text = "Fly Method"
flyMethodLabel.TextColor3 = Color3.new(1, 1, 1)
flyMethodLabel.TextXAlignment = Enum.TextXAlignment.Left
local flyMethodDropdown = Instance.new("TextButton")
flyMethodDropdown.Parent = flyMethodFrame
flyMethodDropdown.Size = UDim2.new(0.5, -8, 1, 0)
flyMethodDropdown.Position = UDim2.new(0.5, 8, 0, 0)
flyMethodDropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
flyMethodDropdown.Text = flyMethod
flyMethodDropdown.TextColor3 = Color3.new(1, 1, 1)
flyMethodDropdown.MouseButton1Click:Connect(function()
    flyMethod = (flyMethod == "Bypass") and "Velocity" or "Bypass"
    flyMethodDropdown.Text = flyMethod
end)

-- Infinite Stamina Toggle
local infStaminaConn
addToggle("Infinite Stamina", false, function(enabled)
    if enabled then
        infStaminaConn = run.RenderStepped:Connect(function()
            if me.Character and me.Character:FindFirstChild("Humanoid") then
                me.Character.Humanoid:SetAttribute("ZSPRN_M", true)
            end
        end)
    else
        if infStaminaConn then infStaminaConn:Disconnect() end
        infStaminaConn = nil
        if me.Character and me.Character:FindFirstChild("Humanoid") then
            me.Character.Humanoid:SetAttribute("ZSPRN_M", nil)
        end
    end
end)

-- No Fall Damage Toggle
local noFallConn
addToggle("No Fall Damage", false, function(enabled)
    if enabled then
        if me.Character then
            local ff = Instance.new("ForceField")
            ff.Parent = me.Character
            ff.Visible = false
        end
        noFallConn = me.CharacterAdded:Connect(function(char)
            local ff = Instance.new("ForceField")
            ff.Parent = char
            ff.Visible = false
        end)
    else
        if me.Character then
            for _, a in pairs(me.Character:GetChildren()) do
                if a:IsA("ForceField") and a.Visible == false then
                    a:Destroy()
                end
            end
        end
        if noFallConn then noFallConn:Disconnect() end
        noFallConn = nil
    end
end)

-- Noclip Toggle
local noclipConn
addToggle("Noclip", false, function(enabled)
    if enabled then
        noclipConn = run.RenderStepped:Connect(function()
            if me.Character then
                for _, part in pairs(me.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConn then noclipConn:Disconnect() end
        noclipConn = nil
    end
end)

-- Fake Down Toggle
addToggle("Fake Down", false, function(enabled)
    -- Placeholder: No crash
end)

-- Stop Neck Move Toggle
local neckConn
addToggle("Stop Neck Move", false, function(enabled)
    if enabled then
        if me.Character then
            me.Character:SetAttribute("NoNeckMovement", true)
        end
        neckConn = me.CharacterAdded:Connect(function(char)
            char:SetAttribute("NoNeckMovement", true)
        end)
    else
        if me.Character then
            me.Character:SetAttribute("NoNeckMovement", nil)
        end
        if neckConn then neckConn:Disconnect() end
        neckConn = nil
    end
end)

-- Unbreak Limbs Toggle
addToggle("Unbreak Limbs", false, function(enabled)
    -- Placeholder: No crash
end)
